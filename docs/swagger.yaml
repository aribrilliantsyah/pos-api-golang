definitions:
  schemas.CreateCategory:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  schemas.CreateCustomer:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - name
    type: object
  schemas.CreateOrder:
    properties:
      customer:
        allOf:
        - $ref: '#/definitions/schemas.Customer'
        description: |-
          - new: required: customer.name, customer.email, customer.phone
          - guest: required: guest_name
          - member: required: customer.id
      customer_id:
        type: integer
      items:
        items:
          $ref: '#/definitions/schemas.CreateOrderItem'
        minItems: 1
        type: array
      payment_method:
        enum:
        - cash
        - transfer
        type: string
      type:
        enum:
        - new
        - guest
        - member
        type: string
    required:
    - items
    - payment_method
    - type
    type: object
  schemas.CreateOrderItem:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  schemas.CreateProduct:
    properties:
      category_id:
        type: integer
      name:
        type: string
      price:
        type: number
    required:
    - category_id
    - name
    - price
    type: object
  schemas.CreateProductHistory:
    properties:
      product_id:
        type: integer
      quantity_change:
        type: integer
      reason:
        type: string
      type:
        enum:
        - in
        - out
        type: string
    required:
    - product_id
    - quantity_change
    - reason
    - type
    type: object
  schemas.CreateRefund:
    properties:
      trx_number:
        type: string
    required:
    - trx_number
    type: object
  schemas.CreateUser:
    properties:
      full_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - full_name
    - password
    - role
    - username
    type: object
  schemas.Customer:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  schemas.Login:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  schemas.Response:
    properties:
      data:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: string
    type: object
  schemas.UpdateCategory:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  schemas.UpdateCustomer:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - name
    type: object
  schemas.UpdateProduct:
    properties:
      category_id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  schemas.UpdateUser:
    properties:
      full_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      summary: Login
      tags:
      - auth
  /api/v1/categories:
    get:
      description: Retrieve all categories with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the given payload
      parameters:
      - description: Category Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - categories
  /api/v1/categories/{id}:
    delete:
      description: Delete a product with the given ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Delete a product by ID
      tags:
      - categories
    get:
      description: Retrieve a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update a category with the given ID and payload
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category Update Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Update an existing category
      tags:
      - categories
  /api/v1/categories/{id}/soft:
    delete:
      description: Soft delete a category with the given ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Soft delete a category by ID
      tags:
      - categories
  /api/v1/categories/deleted:
    get:
      description: Retrieve all categories with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all deleted categories
      tags:
      - categories
  /api/v1/customers:
    get:
      description: Retrieve all customers with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer with the given payload
      parameters:
      - description: Customer Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Create a new customer
      tags:
      - customers
  /api/v1/customers/{id}:
    delete:
      description: Delete a customer with the given ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Delete a customer by ID
      tags:
      - customers
    get:
      description: Retrieve a customer by its ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get a customer by ID
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update a customer with the given ID and payload
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Customer Update Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Update an existing customer
      tags:
      - customers
  /api/v1/customers/{id}/soft:
    delete:
      description: Soft delete a customer with the given ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Soft delete a customer by ID
      tags:
      - customers
  /api/v1/customers/deleted:
    get:
      description: Retrieve all customers with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all deleted customers
      tags:
      - customers
  /api/v1/product-history:
    get:
      description: Retrieve all product history with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all product history
      tags:
      - product-history
    post:
      consumes:
      - application/json
      description: Create a new product stock history and update product stock
      parameters:
      - description: Product History Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateProductHistory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Create product stock history
      tags:
      - product-history
  /api/v1/products:
    get:
      description: Retrieve all products with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the given payload
      parameters:
      - description: Product Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /api/v1/products/{id}:
    get:
      description: Retrieve a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product with the given ID and payload
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product Update Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Update an existing product
      tags:
      - products
  /api/v1/products/{id}/soft:
    delete:
      description: Soft delete a product with the given ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Soft delete a product by ID
      tags:
      - products
  /api/v1/products/deleted:
    get:
      description: Retrieve all deleted products with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all deleted products
      tags:
      - products
  /api/v1/transaction/order:
    post:
      consumes:
      - application/json
      description: Create a new order
      parameters:
      - description: Order Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Create product stock history
      tags:
      - transaction
  /api/v1/transaction/refund:
    post:
      consumes:
      - application/json
      description: Create a new order
      parameters:
      - description: Refund Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateRefund'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Create product stock history
      tags:
      - transaction
  /api/v1/users:
    get:
      description: Retrieve all users with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the given payload
      parameters:
      - description: User Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Delete a user with the given ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Retrieve a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user with the given ID and payload
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - users
  /api/v1/users/{id}/soft:
    delete:
      description: Soft delete a user with the given ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Soft delete a user by ID
      tags:
      - users
  /api/v1/users/deleted:
    get:
      description: Retrieve all users with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/schemas.Response'
      security:
      - BearerAuth: []
      summary: Get all deleted users
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
