// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_history.sql

package db

import (
	"context"
	"database/sql"
)

const createProductHistory = `-- name: CreateProductHistory :one
INSERT INTO product_history (trx_ref, product_id, quantity_change, type, reason, created_by, created_at)
VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP)
RETURNING id, trx_ref, product_id, quantity_change, type, reason, created_by, created_at
`

type CreateProductHistoryParams struct {
	TrxRef         string         `json:"trx_ref"`
	ProductID      sql.NullInt64  `json:"product_id"`
	QuantityChange int32          `json:"quantity_change"`
	Type           string         `json:"type"`
	Reason         sql.NullString `json:"reason"`
	CreatedBy      sql.NullInt64  `json:"created_by"`
}

func (q *Queries) CreateProductHistory(ctx context.Context, arg CreateProductHistoryParams) (ProductHistory, error) {
	row := q.queryRow(ctx, q.createProductHistoryStmt, createProductHistory,
		arg.TrxRef,
		arg.ProductID,
		arg.QuantityChange,
		arg.Type,
		arg.Reason,
		arg.CreatedBy,
	)
	var i ProductHistory
	err := row.Scan(
		&i.ID,
		&i.TrxRef,
		&i.ProductID,
		&i.QuantityChange,
		&i.Type,
		&i.Reason,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getAllProductHistory = `-- name: GetAllProductHistory :many

SELECT id, trx_ref, product_id, quantity_change, type, reason, created_by, created_at
FROM product_history
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllProductHistoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// #PRODUCT_HISTORY
func (q *Queries) GetAllProductHistory(ctx context.Context, arg GetAllProductHistoryParams) ([]ProductHistory, error) {
	rows, err := q.query(ctx, q.getAllProductHistoryStmt, getAllProductHistory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductHistory{}
	for rows.Next() {
		var i ProductHistory
		if err := rows.Scan(
			&i.ID,
			&i.TrxRef,
			&i.ProductID,
			&i.QuantityChange,
			&i.Type,
			&i.Reason,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
