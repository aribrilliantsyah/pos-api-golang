// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    trx_number,
    cashier_id,
    customer_id,
    total_amount,
    payment_method,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, trx_number, cashier_id, customer_id, total_amount, payment_method, status, order_date, updated_by, updated_at
`

type CreateOrderParams struct {
	TrxNumber     string        `json:"trx_number"`
	CashierID     sql.NullInt64 `json:"cashier_id"`
	CustomerID    sql.NullInt64 `json:"customer_id"`
	TotalAmount   string        `json:"total_amount"`
	PaymentMethod string        `json:"payment_method"`
	Status        string        `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.queryRow(ctx, q.createOrderStmt, createOrder,
		arg.TrxNumber,
		arg.CashierID,
		arg.CustomerID,
		arg.TotalAmount,
		arg.PaymentMethod,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TrxNumber,
		&i.CashierID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.PaymentMethod,
		&i.Status,
		&i.OrderDate,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    order_id,
    product_id,
    old_product,
    quantity,
    unit_price,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, order_id, product_id, old_product, quantity, unit_price, created_by, created_at
`

type CreateOrderItemParams struct {
	OrderID    sql.NullInt64  `json:"order_id"`
	ProductID  sql.NullInt64  `json:"product_id"`
	OldProduct sql.NullString `json:"old_product"`
	Quantity   int32          `json:"quantity"`
	UnitPrice  string         `json:"unit_price"`
	CreatedBy  sql.NullInt64  `json:"created_by"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.queryRow(ctx, q.createOrderItemStmt, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.OldProduct,
		arg.Quantity,
		arg.UnitPrice,
		arg.CreatedBy,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.OldProduct,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const createRefund = `-- name: CreateRefund :one
INSERT INTO refunds (
    order_id,
    reason,
    created_by
) VALUES (
    $1, $2, $3
) RETURNING id, order_id, reason, refund_at, created_by
`

type CreateRefundParams struct {
	OrderID   sql.NullInt64 `json:"order_id"`
	Reason    string        `json:"reason"`
	CreatedBy sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateRefund(ctx context.Context, arg CreateRefundParams) (Refund, error) {
	row := q.queryRow(ctx, q.createRefundStmt, createRefund, arg.OrderID, arg.Reason, arg.CreatedBy)
	var i Refund
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Reason,
		&i.RefundAt,
		&i.CreatedBy,
	)
	return i, err
}

const getOrderByTrxNumber = `-- name: GetOrderByTrxNumber :one
SELECT id, trx_number, cashier_id, customer_id, total_amount, payment_method, status, order_date, updated_by, updated_at FROM orders 
WHERE trx_number = $1 
LIMIT 1
`

// GetOrderByTrxNumber
func (q *Queries) GetOrderByTrxNumber(ctx context.Context, trxNumber string) (Order, error) {
	row := q.queryRow(ctx, q.getOrderByTrxNumberStmt, getOrderByTrxNumber, trxNumber)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TrxNumber,
		&i.CashierID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.PaymentMethod,
		&i.Status,
		&i.OrderDate,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT id, order_id, product_id, old_product, quantity, unit_price, created_by, created_at FROM order_items 
WHERE order_id = $1
`

// GetOrderItemsByOrderID
func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID sql.NullInt64) ([]OrderItem, error) {
	rows, err := q.query(ctx, q.getOrderItemsByOrderIDStmt, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.OldProduct,
			&i.Quantity,
			&i.UnitPrice,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders 
SET status = $1, 
    updated_by = $2, 
    updated_at = CURRENT_TIMESTAMP 
WHERE id = $3 
RETURNING id, trx_number, cashier_id, customer_id, total_amount, payment_method, status, order_date, updated_by, updated_at
`

type UpdateOrderStatusParams struct {
	Status    string        `json:"status"`
	UpdatedBy sql.NullInt64 `json:"updated_by"`
	ID        int64         `json:"id"`
}

// UpdateOrderStatus
func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.queryRow(ctx, q.updateOrderStatusStmt, updateOrderStatus, arg.Status, arg.UpdatedBy, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TrxNumber,
		&i.CashierID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.PaymentMethod,
		&i.Status,
		&i.OrderDate,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}
