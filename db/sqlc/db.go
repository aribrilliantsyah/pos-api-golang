// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkTokenStmt, err = db.PrepareContext(ctx, checkToken); err != nil {
		return nil, fmt.Errorf("error preparing query CheckToken: %w", err)
	}
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createCustomerStmt, err = db.PrepareContext(ctx, createCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCustomer: %w", err)
	}
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.createProductHistoryStmt, err = db.PrepareContext(ctx, createProductHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProductHistory: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCategoryByIDStmt, err = db.PrepareContext(ctx, deleteCategoryByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategoryByID: %w", err)
	}
	if q.deleteCustomerByIDStmt, err = db.PrepareContext(ctx, deleteCustomerByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCustomerByID: %w", err)
	}
	if q.deleteProductByIDStmt, err = db.PrepareContext(ctx, deleteProductByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProductByID: %w", err)
	}
	if q.deleteUserByIDStmt, err = db.PrepareContext(ctx, deleteUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByID: %w", err)
	}
	if q.generateMemberCodeStmt, err = db.PrepareContext(ctx, generateMemberCode); err != nil {
		return nil, fmt.Errorf("error preparing query GenerateMemberCode: %w", err)
	}
	if q.getAllCategoriesStmt, err = db.PrepareContext(ctx, getAllCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCategories: %w", err)
	}
	if q.getAllCustomersStmt, err = db.PrepareContext(ctx, getAllCustomers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCustomers: %w", err)
	}
	if q.getAllDeletedCategoriesStmt, err = db.PrepareContext(ctx, getAllDeletedCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDeletedCategories: %w", err)
	}
	if q.getAllDeletedCustomersStmt, err = db.PrepareContext(ctx, getAllDeletedCustomers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDeletedCustomers: %w", err)
	}
	if q.getAllDeletedProductsStmt, err = db.PrepareContext(ctx, getAllDeletedProducts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDeletedProducts: %w", err)
	}
	if q.getAllDeletedUsersStmt, err = db.PrepareContext(ctx, getAllDeletedUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDeletedUsers: %w", err)
	}
	if q.getAllProductHistoryStmt, err = db.PrepareContext(ctx, getAllProductHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllProductHistory: %w", err)
	}
	if q.getAllProductsStmt, err = db.PrepareContext(ctx, getAllProducts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllProducts: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getCategoryByIDStmt, err = db.PrepareContext(ctx, getCategoryByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryByID: %w", err)
	}
	if q.getCustomerByEmailStmt, err = db.PrepareContext(ctx, getCustomerByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerByEmail: %w", err)
	}
	if q.getCustomerByEmailExceptIDStmt, err = db.PrepareContext(ctx, getCustomerByEmailExceptID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerByEmailExceptID: %w", err)
	}
	if q.getCustomerByIDStmt, err = db.PrepareContext(ctx, getCustomerByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerByID: %w", err)
	}
	if q.getCustomerByPhoneStmt, err = db.PrepareContext(ctx, getCustomerByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerByPhone: %w", err)
	}
	if q.getCustomerByPhoneExceptIDStmt, err = db.PrepareContext(ctx, getCustomerByPhoneExceptID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomerByPhoneExceptID: %w", err)
	}
	if q.getProductByIDStmt, err = db.PrepareContext(ctx, getProductByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductByID: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUserByUsernameExceptIDStmt, err = db.PrepareContext(ctx, getUserByUsernameExceptID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsernameExceptID: %w", err)
	}
	if q.setCurrentTokenStmt, err = db.PrepareContext(ctx, setCurrentToken); err != nil {
		return nil, fmt.Errorf("error preparing query SetCurrentToken: %w", err)
	}
	if q.softDeleteCategoryByIDStmt, err = db.PrepareContext(ctx, softDeleteCategoryByID); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteCategoryByID: %w", err)
	}
	if q.softDeleteCustomerByIDStmt, err = db.PrepareContext(ctx, softDeleteCustomerByID); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteCustomerByID: %w", err)
	}
	if q.softDeleteProductByIDStmt, err = db.PrepareContext(ctx, softDeleteProductByID); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteProductByID: %w", err)
	}
	if q.softDeleteUserByIDStmt, err = db.PrepareContext(ctx, softDeleteUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteUserByID: %w", err)
	}
	if q.updateCategoryStmt, err = db.PrepareContext(ctx, updateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategory: %w", err)
	}
	if q.updateCustomerStmt, err = db.PrepareContext(ctx, updateCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCustomer: %w", err)
	}
	if q.updateProductStmt, err = db.PrepareContext(ctx, updateProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProduct: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserWithPasswordStmt, err = db.PrepareContext(ctx, updateUserWithPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserWithPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkTokenStmt != nil {
		if cerr := q.checkTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkTokenStmt: %w", cerr)
		}
	}
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createCustomerStmt != nil {
		if cerr := q.createCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCustomerStmt: %w", cerr)
		}
	}
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.createProductHistoryStmt != nil {
		if cerr := q.createProductHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductHistoryStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCategoryByIDStmt != nil {
		if cerr := q.deleteCategoryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryByIDStmt: %w", cerr)
		}
	}
	if q.deleteCustomerByIDStmt != nil {
		if cerr := q.deleteCustomerByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCustomerByIDStmt: %w", cerr)
		}
	}
	if q.deleteProductByIDStmt != nil {
		if cerr := q.deleteProductByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductByIDStmt: %w", cerr)
		}
	}
	if q.deleteUserByIDStmt != nil {
		if cerr := q.deleteUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIDStmt: %w", cerr)
		}
	}
	if q.generateMemberCodeStmt != nil {
		if cerr := q.generateMemberCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing generateMemberCodeStmt: %w", cerr)
		}
	}
	if q.getAllCategoriesStmt != nil {
		if cerr := q.getAllCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCategoriesStmt: %w", cerr)
		}
	}
	if q.getAllCustomersStmt != nil {
		if cerr := q.getAllCustomersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCustomersStmt: %w", cerr)
		}
	}
	if q.getAllDeletedCategoriesStmt != nil {
		if cerr := q.getAllDeletedCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDeletedCategoriesStmt: %w", cerr)
		}
	}
	if q.getAllDeletedCustomersStmt != nil {
		if cerr := q.getAllDeletedCustomersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDeletedCustomersStmt: %w", cerr)
		}
	}
	if q.getAllDeletedProductsStmt != nil {
		if cerr := q.getAllDeletedProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDeletedProductsStmt: %w", cerr)
		}
	}
	if q.getAllDeletedUsersStmt != nil {
		if cerr := q.getAllDeletedUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDeletedUsersStmt: %w", cerr)
		}
	}
	if q.getAllProductHistoryStmt != nil {
		if cerr := q.getAllProductHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllProductHistoryStmt: %w", cerr)
		}
	}
	if q.getAllProductsStmt != nil {
		if cerr := q.getAllProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllProductsStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getCategoryByIDStmt != nil {
		if cerr := q.getCategoryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryByIDStmt: %w", cerr)
		}
	}
	if q.getCustomerByEmailStmt != nil {
		if cerr := q.getCustomerByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerByEmailStmt: %w", cerr)
		}
	}
	if q.getCustomerByEmailExceptIDStmt != nil {
		if cerr := q.getCustomerByEmailExceptIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerByEmailExceptIDStmt: %w", cerr)
		}
	}
	if q.getCustomerByIDStmt != nil {
		if cerr := q.getCustomerByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerByIDStmt: %w", cerr)
		}
	}
	if q.getCustomerByPhoneStmt != nil {
		if cerr := q.getCustomerByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerByPhoneStmt: %w", cerr)
		}
	}
	if q.getCustomerByPhoneExceptIDStmt != nil {
		if cerr := q.getCustomerByPhoneExceptIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerByPhoneExceptIDStmt: %w", cerr)
		}
	}
	if q.getProductByIDStmt != nil {
		if cerr := q.getProductByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductByIDStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameExceptIDStmt != nil {
		if cerr := q.getUserByUsernameExceptIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameExceptIDStmt: %w", cerr)
		}
	}
	if q.setCurrentTokenStmt != nil {
		if cerr := q.setCurrentTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setCurrentTokenStmt: %w", cerr)
		}
	}
	if q.softDeleteCategoryByIDStmt != nil {
		if cerr := q.softDeleteCategoryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteCategoryByIDStmt: %w", cerr)
		}
	}
	if q.softDeleteCustomerByIDStmt != nil {
		if cerr := q.softDeleteCustomerByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteCustomerByIDStmt: %w", cerr)
		}
	}
	if q.softDeleteProductByIDStmt != nil {
		if cerr := q.softDeleteProductByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteProductByIDStmt: %w", cerr)
		}
	}
	if q.softDeleteUserByIDStmt != nil {
		if cerr := q.softDeleteUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteUserByIDStmt: %w", cerr)
		}
	}
	if q.updateCategoryStmt != nil {
		if cerr := q.updateCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryStmt: %w", cerr)
		}
	}
	if q.updateCustomerStmt != nil {
		if cerr := q.updateCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCustomerStmt: %w", cerr)
		}
	}
	if q.updateProductStmt != nil {
		if cerr := q.updateProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserWithPasswordStmt != nil {
		if cerr := q.updateUserWithPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserWithPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	checkTokenStmt                 *sql.Stmt
	createCategoryStmt             *sql.Stmt
	createCustomerStmt             *sql.Stmt
	createProductStmt              *sql.Stmt
	createProductHistoryStmt       *sql.Stmt
	createUserStmt                 *sql.Stmt
	deleteCategoryByIDStmt         *sql.Stmt
	deleteCustomerByIDStmt         *sql.Stmt
	deleteProductByIDStmt          *sql.Stmt
	deleteUserByIDStmt             *sql.Stmt
	generateMemberCodeStmt         *sql.Stmt
	getAllCategoriesStmt           *sql.Stmt
	getAllCustomersStmt            *sql.Stmt
	getAllDeletedCategoriesStmt    *sql.Stmt
	getAllDeletedCustomersStmt     *sql.Stmt
	getAllDeletedProductsStmt      *sql.Stmt
	getAllDeletedUsersStmt         *sql.Stmt
	getAllProductHistoryStmt       *sql.Stmt
	getAllProductsStmt             *sql.Stmt
	getAllUsersStmt                *sql.Stmt
	getCategoryByIDStmt            *sql.Stmt
	getCustomerByEmailStmt         *sql.Stmt
	getCustomerByEmailExceptIDStmt *sql.Stmt
	getCustomerByIDStmt            *sql.Stmt
	getCustomerByPhoneStmt         *sql.Stmt
	getCustomerByPhoneExceptIDStmt *sql.Stmt
	getProductByIDStmt             *sql.Stmt
	getUserByIDStmt                *sql.Stmt
	getUserByUsernameStmt          *sql.Stmt
	getUserByUsernameExceptIDStmt  *sql.Stmt
	setCurrentTokenStmt            *sql.Stmt
	softDeleteCategoryByIDStmt     *sql.Stmt
	softDeleteCustomerByIDStmt     *sql.Stmt
	softDeleteProductByIDStmt      *sql.Stmt
	softDeleteUserByIDStmt         *sql.Stmt
	updateCategoryStmt             *sql.Stmt
	updateCustomerStmt             *sql.Stmt
	updateProductStmt              *sql.Stmt
	updateUserStmt                 *sql.Stmt
	updateUserWithPasswordStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		checkTokenStmt:                 q.checkTokenStmt,
		createCategoryStmt:             q.createCategoryStmt,
		createCustomerStmt:             q.createCustomerStmt,
		createProductStmt:              q.createProductStmt,
		createProductHistoryStmt:       q.createProductHistoryStmt,
		createUserStmt:                 q.createUserStmt,
		deleteCategoryByIDStmt:         q.deleteCategoryByIDStmt,
		deleteCustomerByIDStmt:         q.deleteCustomerByIDStmt,
		deleteProductByIDStmt:          q.deleteProductByIDStmt,
		deleteUserByIDStmt:             q.deleteUserByIDStmt,
		generateMemberCodeStmt:         q.generateMemberCodeStmt,
		getAllCategoriesStmt:           q.getAllCategoriesStmt,
		getAllCustomersStmt:            q.getAllCustomersStmt,
		getAllDeletedCategoriesStmt:    q.getAllDeletedCategoriesStmt,
		getAllDeletedCustomersStmt:     q.getAllDeletedCustomersStmt,
		getAllDeletedProductsStmt:      q.getAllDeletedProductsStmt,
		getAllDeletedUsersStmt:         q.getAllDeletedUsersStmt,
		getAllProductHistoryStmt:       q.getAllProductHistoryStmt,
		getAllProductsStmt:             q.getAllProductsStmt,
		getAllUsersStmt:                q.getAllUsersStmt,
		getCategoryByIDStmt:            q.getCategoryByIDStmt,
		getCustomerByEmailStmt:         q.getCustomerByEmailStmt,
		getCustomerByEmailExceptIDStmt: q.getCustomerByEmailExceptIDStmt,
		getCustomerByIDStmt:            q.getCustomerByIDStmt,
		getCustomerByPhoneStmt:         q.getCustomerByPhoneStmt,
		getCustomerByPhoneExceptIDStmt: q.getCustomerByPhoneExceptIDStmt,
		getProductByIDStmt:             q.getProductByIDStmt,
		getUserByIDStmt:                q.getUserByIDStmt,
		getUserByUsernameStmt:          q.getUserByUsernameStmt,
		getUserByUsernameExceptIDStmt:  q.getUserByUsernameExceptIDStmt,
		setCurrentTokenStmt:            q.setCurrentTokenStmt,
		softDeleteCategoryByIDStmt:     q.softDeleteCategoryByIDStmt,
		softDeleteCustomerByIDStmt:     q.softDeleteCustomerByIDStmt,
		softDeleteProductByIDStmt:      q.softDeleteProductByIDStmt,
		softDeleteUserByIDStmt:         q.softDeleteUserByIDStmt,
		updateCategoryStmt:             q.updateCategoryStmt,
		updateCustomerStmt:             q.updateCustomerStmt,
		updateProductStmt:              q.updateProductStmt,
		updateUserStmt:                 q.updateUserStmt,
		updateUserWithPasswordStmt:     q.updateUserWithPasswordStmt,
	}
}
