// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (member_code, name, phone, email, created_by, created_at)
VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
RETURNING id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	MemberCode string         `json:"member_code"`
	Name       string         `json:"name"`
	Phone      sql.NullString `json:"phone"`
	Email      sql.NullString `json:"email"`
	CreatedBy  sql.NullInt64  `json:"created_by"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.queryRow(ctx, q.createCustomerStmt, createCustomer,
		arg.MemberCode,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.CreatedBy,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCustomerByID = `-- name: DeleteCustomerByID :one
DELETE FROM customers
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCustomerByID(ctx context.Context, id int64) (int64, error) {
	row := q.queryRow(ctx, q.deleteCustomerByIDStmt, deleteCustomerByID, id)
	err := row.Scan(&id)
	return id, err
}

const getAllCustomers = `-- name: GetAllCustomers :many

SELECT id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM customers
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// #CUSTOMER
func (q *Queries) GetAllCustomers(ctx context.Context, arg GetAllCustomersParams) ([]Customer, error) {
	rows, err := q.query(ctx, q.getAllCustomersStmt, getAllCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.MemberCode,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeletedCustomers = `-- name: GetAllDeletedCustomers :many
SELECT id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM customers
WHERE deleted_at IS NOT NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllDeletedCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeletedCustomers(ctx context.Context, arg GetAllDeletedCustomersParams) ([]Customer, error) {
	rows, err := q.query(ctx, q.getAllDeletedCustomersStmt, getAllDeletedCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.MemberCode,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM customers
WHERE email = $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email sql.NullString) (Customer, error) {
	row := q.queryRow(ctx, q.getCustomerByEmailStmt, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByEmailExceptID = `-- name: GetCustomerByEmailExceptID :one
SELECT id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM customers
WHERE email = $1 AND id != $2
LIMIT 1
`

type GetCustomerByEmailExceptIDParams struct {
	Email sql.NullString `json:"email"`
	ID    int64          `json:"id"`
}

func (q *Queries) GetCustomerByEmailExceptID(ctx context.Context, arg GetCustomerByEmailExceptIDParams) (Customer, error) {
	row := q.queryRow(ctx, q.getCustomerByEmailExceptIDStmt, getCustomerByEmailExceptID, arg.Email, arg.ID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM customers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int64) (Customer, error) {
	row := q.queryRow(ctx, q.getCustomerByIDStmt, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByPhone = `-- name: GetCustomerByPhone :one
SELECT id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM customers
WHERE phone = $1
`

func (q *Queries) GetCustomerByPhone(ctx context.Context, phone sql.NullString) (Customer, error) {
	row := q.queryRow(ctx, q.getCustomerByPhoneStmt, getCustomerByPhone, phone)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByPhoneExceptID = `-- name: GetCustomerByPhoneExceptID :one
SELECT id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM customers
WHERE phone = $1 AND id != $2
LIMIT 1
`

type GetCustomerByPhoneExceptIDParams struct {
	Phone sql.NullString `json:"phone"`
	ID    int64          `json:"id"`
}

func (q *Queries) GetCustomerByPhoneExceptID(ctx context.Context, arg GetCustomerByPhoneExceptIDParams) (Customer, error) {
	row := q.queryRow(ctx, q.getCustomerByPhoneExceptIDStmt, getCustomerByPhoneExceptID, arg.Phone, arg.ID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteCustomerByID = `-- name: SoftDeleteCustomerByID :one
UPDATE customers
SET deleted_by = $2, deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type SoftDeleteCustomerByIDParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) SoftDeleteCustomerByID(ctx context.Context, arg SoftDeleteCustomerByIDParams) (Customer, error) {
	row := q.queryRow(ctx, q.softDeleteCustomerByIDStmt, softDeleteCustomerByID, arg.ID, arg.DeletedBy)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET member_code = $2, name = $3, phone = $4, email = $5, updated_by = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, member_code, name, phone, email, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type UpdateCustomerParams struct {
	ID         int64          `json:"id"`
	MemberCode string         `json:"member_code"`
	Name       string         `json:"name"`
	Phone      sql.NullString `json:"phone"`
	Email      sql.NullString `json:"email"`
	UpdatedBy  sql.NullInt64  `json:"updated_by"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.queryRow(ctx, q.updateCustomerStmt, updateCustomer,
		arg.ID,
		arg.MemberCode,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.UpdatedBy,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.MemberCode,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
