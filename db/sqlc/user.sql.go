// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const checkToken = `-- name: CheckToken :one
SELECT id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM users
WHERE username = $1 AND current_token = $2
LIMIT 1
`

type CheckTokenParams struct {
	Username     string         `json:"username"`
	CurrentToken sql.NullString `json:"current_token"`
}

func (q *Queries) CheckToken(ctx context.Context, arg CheckTokenParams) (User, error) {
	row := q.queryRow(ctx, q.checkTokenStmt, checkToken, arg.Username, arg.CurrentToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FullName,
		&i.CurrentToken,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash, role, full_name, created_by, created_at)
VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
RETURNING id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username     string        `json:"username"`
	PasswordHash string        `json:"password_hash"`
	Role         string        `json:"role"`
	FullName     string        `json:"full_name"`
	CreatedBy    sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
		arg.FullName,
		arg.CreatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FullName,
		&i.CurrentToken,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE FROM users
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) (int64, error) {
	row := q.queryRow(ctx, q.deleteUserByIDStmt, deleteUserByID, id)
	err := row.Scan(&id)
	return id, err
}

const getAllDeletedUsers = `-- name: GetAllDeletedUsers :many
SELECT id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NOT NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllDeletedUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeletedUsers(ctx context.Context, arg GetAllDeletedUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.getAllDeletedUsersStmt, getAllDeletedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.FullName,
			&i.CurrentToken,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many

SELECT id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// #USER
func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
			&i.FullName,
			&i.CurrentToken,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FullName,
		&i.CurrentToken,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, role
FROM users
WHERE username = $1
LIMIT 1
`

type GetUserByUsernameRow struct {
	ID           int64  `json:"id"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const getUserByUsernameExceptID = `-- name: GetUserByUsernameExceptID :one
SELECT id, username, password_hash, role
FROM users
WHERE username = $1 AND id != $2
LIMIT 1
`

type GetUserByUsernameExceptIDParams struct {
	Username string `json:"username"`
	ID       int64  `json:"id"`
}

type GetUserByUsernameExceptIDRow struct {
	ID           int64  `json:"id"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

func (q *Queries) GetUserByUsernameExceptID(ctx context.Context, arg GetUserByUsernameExceptIDParams) (GetUserByUsernameExceptIDRow, error) {
	row := q.queryRow(ctx, q.getUserByUsernameExceptIDStmt, getUserByUsernameExceptID, arg.Username, arg.ID)
	var i GetUserByUsernameExceptIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const setCurrentToken = `-- name: SetCurrentToken :one
UPDATE users
SET current_token = $2
WHERE username = $1
RETURNING id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type SetCurrentTokenParams struct {
	Username     string         `json:"username"`
	CurrentToken sql.NullString `json:"current_token"`
}

func (q *Queries) SetCurrentToken(ctx context.Context, arg SetCurrentTokenParams) (User, error) {
	row := q.queryRow(ctx, q.setCurrentTokenStmt, setCurrentToken, arg.Username, arg.CurrentToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FullName,
		&i.CurrentToken,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteUserByID = `-- name: SoftDeleteUserByID :one
UPDATE users
SET deleted_by = $2, deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type SoftDeleteUserByIDParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) SoftDeleteUserByID(ctx context.Context, arg SoftDeleteUserByIDParams) (User, error) {
	row := q.queryRow(ctx, q.softDeleteUserByIDStmt, softDeleteUserByID, arg.ID, arg.DeletedBy)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FullName,
		&i.CurrentToken,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2, full_name = $3, role = $4, updated_by = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID        int64         `json:"id"`
	Username  string        `json:"username"`
	FullName  string        `json:"full_name"`
	Role      string        `json:"role"`
	UpdatedBy sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.Role,
		arg.UpdatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FullName,
		&i.CurrentToken,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserWithPassword = `-- name: UpdateUserWithPassword :one
UPDATE users
SET username = $2, full_name = $3, role = $4, password_hash = $5, updated_by = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, username, password_hash, role, full_name, current_token, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type UpdateUserWithPasswordParams struct {
	ID           int64         `json:"id"`
	Username     string        `json:"username"`
	FullName     string        `json:"full_name"`
	Role         string        `json:"role"`
	PasswordHash string        `json:"password_hash"`
	UpdatedBy    sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) UpdateUserWithPassword(ctx context.Context, arg UpdateUserWithPasswordParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserWithPasswordStmt, updateUserWithPassword,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.Role,
		arg.PasswordHash,
		arg.UpdatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.FullName,
		&i.CurrentToken,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
