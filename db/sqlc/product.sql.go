// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, price, stock, category_id, created_by, created_at)
VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
RETURNING id, name, price, stock, category_id, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type CreateProductParams struct {
	Name       string        `json:"name"`
	Price      string        `json:"price"`
	Stock      int32         `json:"stock"`
	CategoryID sql.NullInt64 `json:"category_id"`
	CreatedBy  sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
		arg.CreatedBy,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProductByID = `-- name: DeleteProductByID :one
DELETE FROM products
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProductByID(ctx context.Context, id int64) (int64, error) {
	row := q.queryRow(ctx, q.deleteProductByIDStmt, deleteProductByID, id)
	err := row.Scan(&id)
	return id, err
}

const getAllDeletedProducts = `-- name: GetAllDeletedProducts :many
SELECT id, name, price, stock, category_id, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at 
FROM products
WHERE deleted_at IS NOT NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllDeletedProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeletedProducts(ctx context.Context, arg GetAllDeletedProductsParams) ([]Product, error) {
	rows, err := q.query(ctx, q.getAllDeletedProductsStmt, getAllDeletedProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProducts = `-- name: GetAllProducts :many

SELECT id, name, price, stock, category_id, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at 
FROM products
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// #PRODUCT
func (q *Queries) GetAllProducts(ctx context.Context, arg GetAllProductsParams) ([]Product, error) {
	rows, err := q.query(ctx, q.getAllProductsStmt, getAllProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, stock, category_id, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.queryRow(ctx, q.getProductByIDStmt, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteProductByID = `-- name: SoftDeleteProductByID :one
UPDATE products
SET deleted_by = $2, deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, price, stock, category_id, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type SoftDeleteProductByIDParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) SoftDeleteProductByID(ctx context.Context, arg SoftDeleteProductByIDParams) (Product, error) {
	row := q.queryRow(ctx, q.softDeleteProductByIDStmt, softDeleteProductByID, arg.ID, arg.DeletedBy)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, price = $3, stock = $4, category_id = $5, updated_by = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, price, stock, category_id, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type UpdateProductParams struct {
	ID         int64         `json:"id"`
	Name       string        `json:"name"`
	Price      string        `json:"price"`
	Stock      int32         `json:"stock"`
	CategoryID sql.NullInt64 `json:"category_id"`
	UpdatedBy  sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.updateProductStmt, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
		arg.UpdatedBy,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE products 
SET stock = $2, 
    updated_by = $3, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 
RETURNING id, name, price, stock, category_id, created_by, updated_by, deleted_by, created_at, updated_at, deleted_at
`

type UpdateProductStockParams struct {
	ID        int64         `json:"id"`
	Stock     int32         `json:"stock"`
	UpdatedBy sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (Product, error) {
	row := q.queryRow(ctx, q.updateProductStockStmt, updateProductStock, arg.ID, arg.Stock, arg.UpdatedBy)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
